<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>homepage</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <nav class="bg-gray-800 p-4">
         <div class="container mx-auto flex justify-between items-center">
            <!-- Logo -->
            <a href="/home" class="text-white font-bold text-xl">My Website</a>

            <!-- Navbar Links -->
            <ul class="flex space-x-4">
                  <li>
                  <!-- Logout Button -->
                     <button id="logoutBtn" class="text-white hover:text-gray-300 focus:outline-none">Logout</button>
                 </li>  
            </ul>
        </div>
    </nav>
    <div class="container mx-auto p-8">
        <h2 class="text-2xl font-semibold mb-4">Champions</h2>
        
        
        <table id="heroTable" class="w-full border-collapse border border-gray-300">
            <thead>
                <tr>
                    <th class="border border-gray-300 px-4 py-2">ID</th>
                    <th class="border border-gray-300 px-4 py-2">Name</th>
                    <th class="border border-gray-300 px-4 py-2">Build Type</th>
                    <th class="border border-gray-300 px-4 py-2">Level</th>
                    <th class="border border-gray-300 px-4 py-2">Actions</th> <!-- New column for actions -->
                </tr>
            </thead>
            <tbody>
                {{#each heroes}}
                <tr>
                   <td class="border border-gray-300 px-4 py-2">{{this.id}}</td>
                   <td class="border border-gray-300 px-4 py-2">{{this.name}}</td>
                   <td class="border border-gray-300 px-4 py-2">{{this.build_type}}</td>
                   <td class="border border-gray-300 px-4 py-2">{{this.level}}</td>
                    <td class="border border-gray-300 px-4 py-2">
                        <div class="flex">
                                <!-- Delete button -->
                             <form action="/auth/delete-hero" method="POST">
                                 <input type="hidden" name="id" value="{{this.id}}">
                                 <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50">Delete</button>
                            </form>
                              <!-- Update button -->
                              {{!-- <form action="/update-user" method="GET">
                                 <input type="hidden" name="userId" value="{{this.id}}">
                                 <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 ml-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">Update</button>
                             </form>  --}}
                             <button type="button" onclick="showUpdateForm({{this.id}}, '{{this.name}}', '{{this.build_type}}', {{this.level}})" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 ml-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">Update</button>
                        </div>
                        </div>
                        <!-- Delete button -->
                       
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>
         <!-- Button to show/hide the form -->
         
        <div class="my-2">
            <button id="toggleFormBtn" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50">+</button>
        </div>
         <div class="my-4  flex justify-center">
            <button id="prevBtn" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 mx-2">Prev</button>
            <button id="nextBtn" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 mx-2">Next</button>
        </div>

        <!-- Form to add a new user (initially hidden) -->
        <div id="addUserForm" class="hidden">
            <h2 class="text-xl font-semibold mb-4">Add New Champion</h2>
            <form action="/auth/addhero" method="POST">
                <input type="text" name="name" placeholder="Name" class="block mb-4 w-full border border-gray-300 rounded-md px-4 py-2">
                <input type="text" name="buildtype" placeholder="Build Type" class="block mb-4 w-full border border-gray-300 rounded-md px-4 py-2">
                <input type="text" name="charLevel" placeholder="Character Level" class="block mb-4 w-full border border-gray-300 rounded-md px-4 py-2">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">Submit</button>
            </form>
            {{message}}
        </div>

        <div id="updateUserForm" class="hidden">
            <h2 class="text-xl font-semibold mb-4">Update Champion</h2>
            <form action="/auth/updatehero" method="POST">
                <input type="hidden" name="id" id="updateHeroId">
                <input type="text" name="name" id="updateHeroName" placeholder="Name" class="block mb-4 w-full border border-gray-300 rounded-md px-4 py-2">
                <input type="text" name="buildtype" id="updateHeroBuildType" placeholder="Build Type" class="block mb-4 w-full border border-gray-300 rounded-md px-4 py-2">
                <input type="text" name="charLevel" id="updateHeroLevel" placeholder="Character Level" class="block mb-4 w-full border border-gray-300 rounded-md px-4 py-2">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">Submit</button>
            </form>
            {{message}}
        </div>
        
    </div>

    <!-- JavaScript to toggle the form visibility -->
    <script>

        const toggleFormBtn = document.getElementById('toggleFormBtn');
        const addUserForm = document.getElementById('addUserForm');
        const updateUserForm = document.getElementById('updateUserForm');

        toggleFormBtn.addEventListener('click', () => {
            addUserForm.classList.toggle('hidden');
        });

        function showUpdateForm(id, name, buildType, level) {
            document.getElementById('updateHeroId').value = id;
            document.getElementById('updateHeroName').value = name;
            document.getElementById('updateHeroBuildType').value = buildType;
            document.getElementById('updateHeroLevel').value = level;
            updateUserForm.classList.remove('hidden');
        }

        

        // Pagination variables
        let currentPage = 1;
        const rowsPerPage = 5;

        // Function to display the table rows
        function displayTableRows() {
            const table = document.getElementById('heroTable').getElementsByTagName('tbody')[0];
            const rows = table.getElementsByTagName('tr');
            const totalRows = rows.length;

            // Hide all rows
            for (let i = 0; i < totalRows; i++) {
                rows[i].style.display = 'none';
            }

            // Calculate start and end indexes for current page
            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = startIndex + rowsPerPage;

            // Show only the rows for the current page
            for (let i = startIndex; i < endIndex && i < totalRows; i++) {
                rows[i].style.display = '';
            }
        }

        // Function to go to the next page
        document.getElementById('nextBtn').addEventListener('click', () => {
            const table = document.getElementById('heroTable').getElementsByTagName('tbody')[0];
            const totalRows = table.getElementsByTagName('tr').length;

            if ((currentPage * rowsPerPage) < totalRows) {
                currentPage++;
                displayTableRows();
            }
        });

        // Function to go to the previous page
        document.getElementById('prevBtn').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                displayTableRows();
            }
        });

        // Initial call to display table rows
        displayTableRows();

        document.addEventListener('DOMContentLoaded', function() {
         const logoutBtn = document.getElementById('logoutBtn');

     if (logoutBtn) {
        logoutBtn.addEventListener('click', function() {
            // Make an AJAX request to trigger logout
            fetch('/auth/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
            .then(response => {
                if (response.ok) {
                    // Redirect the user to the login page after successful logout
                    window.location.href = '/';
                } else {
                    console.error('Logout failed');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });
    }
    });
    </script>
    </div>

</body>
</html>